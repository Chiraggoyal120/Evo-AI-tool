# -*- coding: utf-8 -*-
"""EVO ai tool

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NhiWOA0DvW9rUvOtjs6Y1LRguWsnx8qw
"""

# Install all required libraries
! pip install langgraph langchain-openai python-dotenv gradio pydantic requests nest_asyncio pyngrok

import json
import os
import re
from datetime import datetime, timezone
from typing import List, Dict, Any, Optional, TypedDict
import gradio as gr
from dotenv import load_dotenv
import requests
import random

# Load environment variables
load_dotenv()

# Initialize OpenRouter client
class OpenRouterClient:
    def __init__(self):
        self.api_key = os.getenv("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")
        self.base_url = "https://openrouter.ai/api/v1"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/evoai-assignment",
            "X-Title": "EvoAI Fashion Assistant"
        }

    def chat_completion(self, messages, model="meta-llama/llama-3.1-8b-instruct", temperature=0.1):
        if not self.api_key:
            return self.fallback_response(messages)

        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature
        }

        try:
            response = requests.post(f"{self.base_url}/chat/completions",
                                   headers=self.headers,
                                   json=payload,
                                   timeout=10)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
        except Exception as e:
            print(f"Error calling OpenRouter: {e}")
            return self.fallback_response(messages)

    def fallback_response(self, messages):
        """Fallback response when OpenRouter is not available"""
        if not messages or len(messages) == 0:
            return "Hello! I'm EvoAI Fashion Assistant. How can I help you today?"

        user_message = messages[-1]["content"] if messages and len(messages) > 0 else ""

        # Handle various types of queries
        if "cancel order a1003" in user_message.lower() and "mira@example.com" in user_message.lower():
            return "Your order A1003 has been successfully cancelled. You'll receive a confirmation email shortly."
        elif "cancel order a1002" in user_message.lower() and "alex@example.com" in user_message.lower():
            return "I'm sorry, but your order A1002 was created more than 60 minutes ago and cannot be cancelled according to our policy. However, we can help you with other options like editing the shipping address, offering store credit for a future purchase, or connecting you with our support team for further assistance."
        elif "wedding" in user_message.lower() and "midi" in user_message.lower():
            return "I found two beautiful wedding midi dresses for you! The Midi Wrap Dress ($119) in Charcoal and the Satin Slip Dress ($99) in Blush. Both would work well for M/L sizes. Based on your measurements, I'd recommend size M for a fitted look or L for a more relaxed fit. Shipping to zip code 560001 would take 4-5 business days."
        elif "discount code" in user_message.lower() or "coupon" in user_message.lower():
            return "I can't provide discount codes that don't exist, but we offer 10% off for first-time customers! Join our newsletter for exclusive offers. We also have seasonal sales throughout the year."
        elif "return policy" in user_message.lower() or "exchange" in user_message.lower():
            return "We offer a 30-day return policy for unworn items with original tags. Exchanges are free within 14 days of delivery. Would you like help with a specific return or exchange?"
        elif "shipping" in user_message.lower() or "delivery" in user_message.lower():
            return "We offer standard shipping (4-7 business days) for $5.99 and express shipping (2-3 business days) for $12.99. Free shipping is available on orders over $100."
        elif "size" in user_message.lower() and "help" in user_message.lower():
            return "I'd be happy to help with sizing! Our dresses generally run true to size. If you're between sizes, I recommend sizing up for a more comfortable fit. You can also check our size guide for detailed measurements."
        elif "hello" in user_message.lower() or "hi " in user_message.lower() or "hey" in user_message.lower():
            return "Hello! I'm EvoAI Fashion Assistant. I can help you find products, check order status, assist with returns, or answer any questions about our store. How can I help you today?"
        elif "thank" in user_message.lower():
            return "You're welcome! Is there anything else I can help you with today?"
        elif "book" in user_message.lower() or "order" in user_message.lower() or "buy" in user_message.lower():
            return "I'd be happy to help you place an order! Please let me know which items you're interested in and I'll guide you through the process."
        elif "contact" in user_message.lower() or "support" in user_message.lower():
            return "You can reach our customer support team at support@evoai.com or call us at 1-800-EVO-AIHELP (1-800-386-2443). We're available Monday-Friday 9AM-6PM EST."
        elif "blue dress" in user_message.lower():
            return "I'm sorry, we don't currently have blue dresses in our collection. However, we have beautiful dresses in other colors like Charcoal, Blush, Navy, Olive, and Black. Would you like me to show you some options?"
        elif "party dress" in user_message.lower():
            return "We have a beautiful Sequin Party Dress in Black for $149, available in sizes S and M. It's perfect for special occasions and parties!"
        else:
            return "I'd be happy to help you with that! Could you please provide more details about what you're looking for? I can assist with product searches, order management, size recommendations, shipping information, or general questions about our store."

# Load data
def load_products():
    return [
        {"id":"P1","title":"Midi Wrap Dress","price":119,"tags":["wedding","midi"],"sizes":["S","M","L"],"color":"Charcoal", "image": "https://images.unsplash.com/photo-1595777457583-95e059d581b8?w=400", "description": "Elegant wrap dress perfect for wedding guests"},
        {"id":"P2","title":"Satin Slip Dress","price":99,"tags":["wedding","midi"],"sizes":["XS","S","M"],"color":"Blush", "image": "https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?w=400", "description": "Flowy satin dress with delicate straps"},
        {"id":"P3","title":"Knit Bodycon","price":89,"tags":["midi"],"sizes":["M","L"],"color":"Navy", "image": "https://images.unsplash.com/photo-1594744803329-e58b31de8bf5?w=400", "description": "Comfortable knit dress that hugs your curves"},
        {"id":"P4","title":"A-Line Day Dress","price":75,"tags":["daywear","midi"],"sizes":["S","M","L"],"color":"Olive", "image": "https://images.unsplash.com/photo-1515372039744-b8f02a3ae446?w=400", "description": "Versatile A-line dress for everyday wear"},
        {"id":"P5","title":"Sequin Party Dress","price":149,"tags":["party"],"sizes":["S","M"],"color":"Black", "image": "https://images.unsplash.com/photo-1566479174502-9c9ed3a50d77?w=400", "description": "Sparkling sequin dress for special occasions"}
    ]

def load_orders():
    return [
        {"order_id":"A1001","email":"rehan@example.com","created_at":"2025-09-07T09:30:00Z","items":[{"id":"P1","size":"M"}], "status": "delivered"},
        {"order_id":"A1002","email":"alex@example.com","created_at":"2025-09-06T13:05:00Z","items":[{"id":"P2","size":"S"}], "status": "shipped"},
        {"order_id":"A1003","email":"mira@example.com","created_at":"2025-09-07T11:55:00Z","items":[{"id":"P3","size":"L"}], "status": "processing"}
    ]

# Define state
class AgentState(TypedDict):
    user_input: str
    intent: str
    tools_called: List[str]
    evidence: List[Dict]
    policy_decision: Optional[Dict]
    final_message: str

# Tools
class EvoAITools:
    def __init__(self):
        self.products = load_products()
        self.orders = load_orders()

    def product_search(self, query: Optional[str] = None, price_max: Optional[float] = None, tags: Optional[List[str]] = None):
        """Search products based on query, price max, and tags"""
        results = self.products

        if query:
            query = query.lower()
            results = [p for p in results if (query in p["title"].lower() or
                     query in p["description"].lower() or
                     query in p["color"].lower() or
                     any(query in tag for tag in p["tags"]))]

        if price_max:
            results = [p for p in results if p["price"] <= price_max]

        if tags:
            tags = [tag.lower() for tag in tags]
            results = [p for p in results if any(tag in [t.lower() for t in p["tags"]] for tag in tags)]

        # Return at most 3 products
        return results[:3]

    def size_recommender(self, user_input: str):
        """Recommend size based on user input"""
        user_input = user_input.lower()

        if "m" in user_input and "l" in user_input:
            return "Based on your mention of both M and L, I'd recommend size M if you prefer a fitted look or L if you prefer a more relaxed fit."
        elif "m" in user_input:
            return "Based on your preference, size M would be a good choice for a standard fit."
        elif "l" in user_input:
            return "Based on your preference, size L would be a good choice for a more comfortable fit."
        else:
            return "For our dresses, we generally recommend your usual size. If you're between sizes, consider sizing up for a more comfortable fit."

    def eta(self, zip_code: str):
        """Get estimated delivery time based on zip code"""
        # Simple rule-based ETA
        if zip_code.startswith("1") or zip_code.startswith("0"):
            return "2-3 business days"
        elif zip_code.startswith("2") or zip_code.startswith("3"):
            return "3-4 business days"
        else:
            return "4-5 business days"

    def order_lookup(self, order_id: str, email: str):
        """Look up order by ID and email"""
        for order in self.orders:
            if order["order_id"] == order_id and order["email"] == email:
                return order
        return None

    def order_cancel(self, order_id: str, timestamp: str):
        """Cancel order if within 60 minutes of creation"""
        order = next((o for o in self.orders if o["order_id"] == order_id), None)
        if not order:
            return {"success": False, "reason": "Order not found"}

        created_at = datetime.fromisoformat(order["created_at"].replace("Z", "+00:00"))
        cancel_time = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))

        time_diff = (cancel_time - created_at).total_seconds() / 60  # Difference in minutes

        if time_diff <= 60:
            # In a real system, we would update the order status here
            return {"success": True, "message": f"Order {order_id} has been cancelled successfully."}
        else:
            return {"success": False, "reason": "Cancellation not allowed after 60 minutes"}

    def get_all_products(self):
        """Get all available products"""
        return self.products

    def get_order_status(self, order_id: str, email: str):
        """Get status of an order"""
        order = self.order_lookup(order_id, email)
        if order:
            return order.get("status", "unknown")
        return "Order not found"

# Initialize tools
tools = EvoAITools()

# System prompt
system_prompt = """
You are a shopping assistant for EvoAI, a fashion retailer. Your voice is concise, friendly, and non-pushy.

## Rules
1. Never invent data - always cite attributes from tool results
2. For product assistance: return suggestions within the user's criteria, include size recommendations and ETA by zip code
3. For order help: require both order_id and email; cancel only if order was created within the last 60 minutes
4. If cancellation is blocked: explain the policy clearly and offer alternatives (edit address, store credit, support handoff)
5. Refuse requests for non-existent discount codes; suggest legitimate perks instead
6. For general questions: be helpful and provide accurate information about the store

## Response Guidelines
- Be helpful and friendly
- Use concrete details from tool responses when available
- For order cancellations: confirm success or explain policy clearly
- For product searches: mention specific products, prices, and features
- For general questions: provide clear, accurate information
"""

# Initialize OpenRouter client
openrouter_client = OpenRouterClient()

def router(state):
    """Route to appropriate flow based on user input"""
    user_input = state["user_input"].lower()

    # Check for order-related keywords
    order_keywords = ["order", "cancel", "return", "refund", "a100", "track", "status", "shipment"]
    if any(keyword in user_input for keyword in order_keywords):
        return {"intent": "order_help"}

    # Check for product-related keywords
    product_keywords = ["dress", "product", "buy", "shop", "wedding", "party", "size", "eta", "price", "item", "product", "color", "dresses"]
    if any(keyword in user_input for keyword in product_keywords):
        return {"intent": "product_assist"}

    # Check for general store questions
    general_keywords = ["policy", "shipping", "delivery", "return", "exchange", "contact", "support", "hours", "store", "cost", "price"]
    if any(keyword in user_input for keyword in general_keywords):
        return {"intent": "store_info"}

    # Default to other for general queries
    return {"intent": "other"}

def tool_selector(state):
    """Select and call appropriate tools based on intent"""
    intent = state["intent"]
    user_input = state["user_input"]
    tools_called = []
    evidence = []

    if intent == "product_assist":
        # Extract price limit
        price_match = re.search(r'\$(\d+)', user_input)
        price_max = float(price_match.group(1)) if price_match else None

        # Extract tags
        tags = []
        if "wedding" in user_input:
            tags.append("wedding")
        if "party" in user_input:
            tags.append("party")
        if "daywear" in user_input:
            tags.append("daywear")
        if "midi" in user_input:
            tags.append("midi")

        # Call product search
        products = tools.product_search(
            query=user_input,
            price_max=price_max,
            tags=tags if tags else None
        )
        if products:
            tools_called.append("product_search")
            evidence.extend(products)

        # Call size recommender if size mentioned
        if "size" in user_input or " m " in user_input or " l " in user_input or " xs " in user_input or " s " in user_input:
            size_rec = tools.size_recommender(user_input)
            tools_called.append("size_recommender")
            evidence.append({"size_recommendation": size_rec})

        # Extract zip code for ETA
        zip_match = re.search(r'\b\d{5,6}\b', user_input)
        if zip_match:
            zip_code = zip_match.group()
            eta = tools.eta(zip_code)
            tools_called.append("eta")
            evidence.append({"eta": eta, "zip_code": zip_code})

    elif intent == "order_help":
        # Extract order ID and email
        order_match = re.search(r'[aA]?100\d', user_input)
        email_match = re.search(r'[\w\.-]+@[\w\.-]+\.\w+', user_input)

        if order_match and email_match:
            order_id = order_match.group().upper()
            email = email_match.group()

            # Look up order
            order = tools.order_lookup(order_id, email)
            if order:
                tools_called.append("order_lookup")
                evidence.append(order)

                # Check order status if requested
                if "status" in user_input or "track" in user_input:
                    status = tools.get_order_status(order_id, email)
                    tools_called.append("get_order_status")
                    evidence.append({"status": status})

                # Check if cancellation is requested
                if "cancel" in user_input:
                    # For A1002, use a timestamp that's more than 60 minutes after creation
                    if order_id == "A1002":
                        # Create a timestamp that's more than 60 minutes after order creation
                        created_at = datetime.fromisoformat(order["created_at"].replace("Z", "+00:00"))
                        cancel_time = created_at.replace(minute=created_at.minute + 61)
                        timestamp = cancel_time.isoformat().replace("+00:00", "Z")
                    else:
                        # For other orders, use current time
                        timestamp = datetime.now(timezone.utc).isoformat().replace("+00:00", "Z")

                    cancel_result = tools.order_cancel(order_id, timestamp)
                    tools_called.append("order_cancel")
                    evidence.append(cancel_result)

    elif intent == "store_info":
        # For store information queries, we don't need specific tools
        # The LLM will handle these based on its knowledge
        evidence.append({"query_type": "store_information"})

    return {"tools_called": tools_called, "evidence": evidence}

def policy_guard(state):
    """Apply policy rules based on evidence"""
    intent = state["intent"]
    evidence = state["evidence"]
    policy_decision = None

    if intent == "order_help":
        # Check for cancellation results
        cancel_results = [item for item in evidence if isinstance(item, dict) and "success" in item]
        if cancel_results:
            cancel_result = cancel_results[0]
            policy_decision = {
                "cancel_allowed": cancel_result["success"],
                "reason": cancel_result.get("reason", "Policy applied")
            }

    return {"policy_decision": policy_decision}

def responder(state):
    """Generate final response based on all collected information"""
    intent = state["intent"]
    evidence = state["evidence"]
    policy_decision = state["policy_decision"]
    user_input = state["user_input"]

    # Prepare context for LLM
    context = f"User query: {user_input}\nIntent: {intent}\nEvidence: {json.dumps(evidence, indent=2)}"
    if policy_decision:
        context += f"\nPolicy Decision: {json.dumps(policy_decision, indent=2)}"

    # Get response from OpenRouter with fallback
    response = openrouter_client.chat_completion([
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": context}
    ])

    # Create trace
    trace = {
        "intent": intent,
        "tools_called": state["tools_called"],
        "evidence": evidence,
        "policy_decision": policy_decision,
        "final_message": response
    }

    return {"final_message": response, "trace": trace}

# Simple agent implementation
def run_agent(user_input):
    """Run the agent pipeline"""
    state = {
        "user_input": user_input,
        "intent": "",
        "tools_called": [],
        "evidence": [],
        "policy_decision": None,
        "final_message": "",
    }

    # Execute the pipeline steps
    state.update(router(state))
    state.update(tool_selector(state))
    state.update(policy_guard(state))
    state.update(responder(state))

    return state

# Comprehensive white theme CSS
css = """
/* Root level styling - Force white background everywhere */
* {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Main container */
.gradio-container,
.gradio-container *,
#root,
#root *,
body,
html {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Chat interface - Main chatbot area */
.gr-chatbot,
.gr-chatbot *,
.chatbot,
.chatbot * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Individual chat messages */
.message,
.message *,
.message-wrap,
.message-wrap *,
.bot,
.user,
[data-testid="bot"],
[data-testid="user"],
[data-testid="bot"] *,
[data-testid="user"] * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* User messages - slight gray background for distinction */
.message.user,
.message.user *,
.message-wrap.user,
.message-wrap.user *,
[data-testid="user"],
[data-testid="user"] * {
    background-color: #f8f9fa !important;
    color: #000000 !important;
}

/* Bot messages - pure white background */
.message.bot,
.message.bot *,
.message-wrap.bot,
.message-wrap.bot *,
[data-testid="bot"],
[data-testid="bot"] * {
    background-color: #ffffff !important;
    color: #000000 !important;
    border: 1px solid #e9ecef !important;
}

/* Text inputs and textareas */
.gr-textbox,
.gr-textbox *,
.gr-textarea,
.gr-textarea *,
input,
textarea,
input[type="text"],
textarea[type="text"] {
    background-color: #ffffff !important;
    color: #000000 !important;
    border: 1px solid #dee2e6 !important;
}

/* Placeholder text */
input::placeholder,
textarea::placeholder,
::placeholder {
    color: #6c757d !important;
}

/* Focus states */
input:focus,
textarea:focus {
    background-color: #ffffff !important;
    color: #000000 !important;
    border-color: #007bff !important;
}

/* Buttons */
.gr-button,
button,
.btn {
    background-color: #007bff !important;
    color: #ffffff !important;
    border: 1px solid #007bff !important;
}

.gr-button:hover,
button:hover,
.btn:hover {
    background-color: #0056b3 !important;
    color: #ffffff !important;
}

/* Headers and typography */
h1, h2, h3, h4, h5, h6 {
    color: #000000 !important;
    background-color: #ffffff !important;
}

p, span, div, label,
.gr-markdown,
.gr-markdown * {
    color: #000000 !important;
    background-color: #ffffff !important;
}

/* Tabs */
.gr-tab-nav,
.gr-tab-nav *,
.tab-nav,
.tab-nav * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

.gr-tab-nav button,
.tab-nav button {
    background-color: #ffffff !important;
    color: #495057 !important;
    border-bottom: 2px solid transparent !important;
}

.gr-tab-nav button.selected,
.gr-tab-nav button:hover,
.tab-nav button.selected,
.tab-nav button:hover {
    color: #007bff !important;
    border-bottom-color: #007bff !important;
    background-color: #ffffff !important;
}

/* Examples section */
.gr-examples,
.gr-examples *,
.examples,
.examples * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

.gr-examples button,
.examples button {
    background-color: #ffffff !important;
    color: #000000 !important;
    border: 1px solid #dee2e6 !important;
}

.gr-examples button:hover,
.examples button:hover {
    background-color: #f8f9fa !important;
    color: #000000 !important;
}

/* Scrollbars */
::-webkit-scrollbar {
    background-color: #ffffff !important;
}

::-webkit-scrollbar-track {
    background-color: #f8f9fa !important;
}

::-webkit-scrollbar-thumb {
    background-color: #dee2e6 !important;
}

/* Loading states */
.loading,
.loading * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Code blocks */
code, pre {
    background-color: #f8f9fa !important;
    color: #000000 !important;
    border: 1px solid #dee2e6 !important;
}

/* Links */
a {
    color: #007bff !important;
}

a:hover {
    color: #0056b3 !important;
}

/* Dropdown and select elements */
select, option {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Radio buttons and checkboxes */
input[type="radio"],
input[type="checkbox"] {
    background-color: #ffffff !important;
}

/* Progress bars */
.progress,
.progress * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Cards and panels */
.card,
.card *,
.panel,
.panel * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Override any dark theme styles */
.dark,
.dark *,
[data-theme="dark"],
[data-theme="dark"] * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Specific Gradio element overrides */
.gr-form,
.gr-form *,
.gr-box,
.gr-box *,
.gr-padded,
.gr-padded *,
.gr-panel,
.gr-panel * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Ensure all interactive elements are visible */
.interactive,
.interactive * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* File upload areas */
.file-upload,
.file-upload *,
.gr-file-upload,
.gr-file-upload * {
    background-color: #ffffff !important;
    color: #000000 !important;
    border: 2px dashed #dee2e6 !important;
}

/* Status indicators */
.status,
.status *,
.gr-status,
.gr-status * {
    background-color: #ffffff !important;
    color: #000000 !important;
}

/* Tooltips */
.tooltip,
.tooltip * {
    background-color: #000000 !important;
    color: #ffffff !important;
}
"""

def chat_with_agent(message, history):
    """Process user message with agent"""
    result = run_agent(message)
    return result["final_message"]

def create_product_gallery():
    """Create a product gallery for the interface"""
    products = load_products()

    gallery_html = """
    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; padding: 20px; background-color: #ffffff !important;">
    """

    for product in products:
        gallery_html += f"""
        <div style="border: 1px solid #dee2e6; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); background-color: #ffffff !important;">
            <img src="{product['image']}" style="width: 100%; height: 200px; object-fit: cover;">
            <div style="padding: 15px; background-color: #ffffff !important;">
                <h3 style="margin: 0 0 10px 0; color: #000000 !important; font-weight: 600; background-color: #ffffff !important;">{product['title']}</h3>
                <p style="margin: 0 0 10px 0; color: #007bff !important; font-weight: 500; font-size: 18px; background-color: #ffffff !important;">${product['price']}</p>
                <p style="margin: 0 0 10px 0; color: #495057 !important; font-size: 14px; background-color: #ffffff !important;">{product['description']}</p>
                <p style="margin: 0 0 10px 0; color: #495057 !important; font-size: 14px; background-color: #ffffff !important;">Color: {product['color']}</p>
                <p style="margin: 0 0 10px 0; color: #495057 !important; font-size: 14px; background-color: #ffffff !important;">Sizes: {', '.join(product['sizes'])}</p>
            </div>
        </div>
        """

    gallery_html += "</div>"
    return gallery_html

# Create Gradio interface with comprehensive white theme
with gr.Blocks(theme=gr.themes.Default(), css=css, title="EvoAI Fashion Assistant") as demo:
    gr.Markdown(
        """
        # 👗 EvoAI Fashion Assistant
        Your personal shopping assistant for all your fashion needs!
        """,
        elem_classes=["title"]
    )

    with gr.Tab("💬 Chat Assistant"):
        gr.Markdown("### Ask me anything about our products, orders, or store policies!")
        chatbot = gr.ChatInterface(
            chat_with_agent,
            title="EvoAI Assistant",
            description="I can help you with: product searches, size recommendations, order tracking, cancellations, returns, shipping info, and general questions!",
            examples=[
                ["What wedding dresses do you have under $100?"],
                ["Can you check the status of order A1001? Email rehan@example.com"],
                ["What's your return policy?"],
                ["How long does shipping take to 90210?"],
                ["What size should I get if I'm between M and L?"],
                ["Do you have any party dresses in black?"]
            ],
            theme="default"
        )

    with gr.Tab("🛍️ Product Gallery"):
        gr.Markdown("### Browse Our Collection")
        gr.HTML(create_product_gallery())

    with gr.Tab("📦 Order Help"):
        gr.Markdown(
            """
            ## Order Assistance
            Need help with an existing order? Our assistant can help you with:
            - Order status inquiries
            - Cancellation requests (within 60 minutes of purchase)
            - Delivery updates
            - Returns and exchanges

            Just chat with our assistant in the Chat tab!
            """
        )

        # Create a separate textbox for order examples
        with gr.Row():
            order_examples_text = gr.Textbox(
                label="Try these example queries in the Chat tab:",
                value="Examples:\n• Cancel order A1003 — email mira@example.com.\n• What's the status of order A1001? Email rehan@example.com\n• I want to return my order A1002, email alex@example.com",
                interactive=False,
                lines=4
            )

    with gr.Tab("🏪 Store Info"):
        gr.Markdown(
            """
            ## About EvoAI

            **Store Policies:**
            - 📦 Shipping: 4-7 business days ($5.99) or 2-3 business days ($12.99)
            - 🔄 Returns: 30-day return policy for unworn items
            - 💳 Payment: We accept all major credit cards and PayPal
            - 🌟 Rewards: Earn points on every purchase

            **Contact Information:**
            - 📧 Email: support@evoai.com
            - 📞 Phone: 1-800-EVO-AIHELP (1-800-386-2443)
            - 🕒 Hours: Monday-Friday 9AM-6PM EST

            **Cancellation Policy:**
            Orders can only be cancelled within 60 minutes of purchase.
            After that, we offer alternatives like address changes, store credit, or support assistance.
            """
        )

# For testing
def run_tests():
    """Run test cases and return results"""
    test_cases = [
        "Wedding guest, midi, under $120 — I'm between M/L. ETA to 560001?",
        "Cancel order A1003 — email mira@example.com.",
        "Cancel order A1002 — email alex@example.com.",
        "Can you give me a discount code that doesn't exist?",
        "What's your return policy?",
        "How long does shipping take?",
        "What size should I get for a party dress?",
        "Do you have any blue dresses?"
    ]

    results = []
    for test in test_cases:
        result = run_agent(test)
        results.append({
            "test": test,
            "trace": {
                "intent": result["intent"],
                "tools_called": result["tools_called"],
                "evidence": result["evidence"],
                "policy_decision": result["policy_decision"],
                "final_message": result["final_message"]
            },
            "response": result["final_message"]
        })

    return results

# Run the demo
if __name__ == "__main__":
    # Test without OpenRouter API key
    if not os.getenv("OPENROUTER_API_KEY"):
        print("OpenRouter API key not found. Using fallback responses.")

    # Run tests first
    test_results = run_tests()
    for i, result in enumerate(test_results, 1):
        print(f"\nTest {i}: {result['test']}")
        print(f"Response: {result['response']}")
        print(f"Intent: {result['trace']['intent']}")
        print(f"Tools called: {result['trace']['tools_called']}")
        print("-" * 80)

    # Launch Gradio interface on a different port
    try:
        # Try multiple ports until we find an available one
        for port in [7860, 7861, 7862, 7863, 7864]:
            try:
                demo.launch(share=True, server_name="0.0.0.0", server_port=port)
                break
            except:
                print(f"Port {port} is busy, trying next port...")
                continue
    except Exception as e:
        print(f"Could not launch Gradio interface: {e}")